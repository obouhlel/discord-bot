// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
  output        = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  name            String
  username        String         @unique
  email           String?        @unique
  discordId       String         @unique
  mediaListUserId Int?           @unique
  mediaListUser   AnimeListUser? @relation(fields: [mediaListUserId], references: [id])
  avatarId        String
  scores          QuizScore[]
  tokens          Token[]
}

model QuizScore {
  id        Int    @id @default(autoincrement())
  discordId String
  guildId   String
  scores    Int    @default(0)
  userId    Int?
  User      User?  @relation(fields: [userId], references: [id])

  @@unique([discordId, guildId])
}

enum List {
  ANILIST
  MAL
}

model AnimeListUser {
  id       Int           @id @default(autoincrement())
  type     List
  userId   Int
  username String
  animes   MediaStatus[]
  user     User?         @relation
}

model MediaStatus {
  id              Int            @id @default(autoincrement())
  malId           Int[]
  AnimeListUser   AnimeListUser? @relation(fields: [animeListUserId], references: [id])
  animeListUserId Int?
}

enum Provider {
  DISCORD
}

model Token {
  id           Int      @id @default(autoincrement())
  provider     Provider
  accessToken  String
  type         String
  expiresIn    Int
  refreshToken String
  scope        String
  User         User?    @relation(fields: [userId], references: [id])
  userId       Int?
}
