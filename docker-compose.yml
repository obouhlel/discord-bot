services:
  bot:
    container_name: bot_discord
    build: .
    environment:
      - CLIENT_ID=${CLIENT_ID}
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - REDIS_URL=${REDIS_URL}
      - LLM_TOKEN=${LLM_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
    labels:
      - "coolify.managed=true"
      - "traefik.enable=true"
      - "traefik.http.routers.bot.rule=Host(`api.neko.oustopie.xyz`)"
      - "traefik.http.routers.bot.entrypoints=https"
      - "traefik.http.routers.bot.tls=true"
      - "traefik.http.services.bot.loadbalancer.server.port=3000"
        # CORS Middleware
      - "traefik.http.middlewares.cors.headers.accessControlAllowOriginList=https://neko.oustopie.xyz"
      - "traefik.http.middlewares.cors.headers.accessControlAllowMethods=GET,POST,OPTIONS"
      - "traefik.http.middlewares.cors.headers.accessControlAllowHeaders=Content-Type,Authorization"
      - "traefik.http.middlewares.cors.headers.accessControlAllowCredentials=true"
      - "traefik.http.middlewares.cors.headers.addVaryHeader=true"
      - "traefik.http.routers.bot.middlewares=cors@docker"
    expose:
      - "3000"
    restart: on-failure
    command: ["curl", "-X", "PUT", "http://localhost:3000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - coolify

networks:
  coolify:
    external: true
